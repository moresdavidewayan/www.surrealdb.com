<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.datamodel">Data model</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.datamodel.ids">Record IDs</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
	<h2>Record IDs</h2>
	<p>In SurrealDB, document record IDs store both the table name, and the record ID.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Text Record IDs</h3>
	<p>Without annotation, text record IDs can contain letters, numbers and <code>_</code> characters.</p>
	<Code @name="docs-surrealql-overview-record-text.surql">
		CREATE company:surrealdb SET name = 'SurrealDB';
	</Code>
	<p>Record IDs can contain complex characters, surrounded by the <code>`</code> character.</p>
	<Code @name="docs/surrealql/overview/record-backtick.surql" />
	<p>Alternatively complex characters within record IDs can be surrounded by the <code>⟨</code> and <code>⟩</code> characters.</p>
	<Code @name="docs/surrealql/overview/record-complex.surql" />
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Numeric Record IDs</h3>
	<p>If a numeric value is specified without any decimal point suffix and is within the range <code>-9223372036854775808</code> to <code>9223372036854775807</code> then the value will be parsed, stored, and treated as a 64-bit integer.</p>
	<Code @name="docs-surrealql-overview-record-numeric.surql">
		CREATE temperature:17493 SET time = time::now(), celsius = 37.5;
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Object-based Record IDs</h3>
	<p>Complex Record IDs support dynamic expressions, allowing parameters, and function expressions to be used as values within the IDs. This is useful in a timeseries context, or for ensuring locality between specific records in a table.</p>
	<Code @name="docs-surrealql-overview-record-object.surql">
		// Set a new parameter
		LET $now = time::now();
		// Create a record with a complex ID using an object
		CREATE temperature:{ location: 'London', date: $now } SET
			location = 'London',
			date = $now,
			temperature = 23.7
		;
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Array-based Record IDs</h3>
	<p>Complex Record IDs support dynamic expressions, allowing parameters, and function expressions to be used as values within the IDs. This is useful in a timeseries context, or for ensuring locality between specific records in a table.</p>
	<Code @name="docs-surrealql-overview-record-array.surql">
		// Set a new parameter
		LET $now = time::now();
		// Create a record with a complex ID using an array
		CREATE temperature:['London', $now] SET
			location = 'London',
			date = $now,
			temperature = 23.7
		;
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Generating Record IDs</h3>
	<p>Record IDs can be generated with a number of built-in ID generation functions. These allow for Record IDs to be generated using cryptographically-secure randomly-generated identifiers (which are suitable for dispersion across a distributed datastore), sequentially incrementing <code>ULID</code> Record identifiers, and <code>UUID</code> version 7 Record idenfitifiers.</p>
	<Code @name="docs-surrealql-overview-record-generate.surql">
		// Generate a random Record ID
		CREATE temperature:rand() SET time = time::now(), celsius = 37.5;
		// Generate a ULID-based Record ID
		CREATE temperature:ulid() SET time = time::now(), celsius = 37.5;
		// Generate a UUIDv7-based Record ID
		CREATE temperature:uuid() SET time = time::now(), celsius = 37.5;
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Record ranges</h3>
	<p>SurrealDB supports the ability to query a range of records, using the record ID. The record ID ranges, retrieve records using the natural sorting order of the record IDs. These range queries can be used to query a range of records in a timeseries context.</p>
	<Code @name="docs-surrealql-overview-record-ranges.surql">
		-- Select all person records with IDs between the given range
		SELECT * FROM person:1..1000;
		-- Select all records for a particular location, inclusive
		SELECT * FROM temperature:['London', NONE]..=['London', time::now()];
		-- Select all temperature records with IDs less than a maximum value
		SELECT * FROM temperature:..['London', '2022-08-29T08:09:31'];
		-- Select all temperature records with IDs greater than a minimum value
		SELECT * FROM temperature:['London', '2022-08-29T08:03:39']..;
		-- Select all temperature records with IDs between the specified range
		SELECT * FROM temperature:['London', '2022-08-29T08:03:39']..['London', '2022-08-29T08:09:31'];
	</Code>
</Layout::Text>

<Layout::Gap large />