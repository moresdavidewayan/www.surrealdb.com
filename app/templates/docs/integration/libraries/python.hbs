<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.integration">Integrations</Crumb::Item>
	<Crumb::Item @link="docs.integration.libraries">Libraries</Crumb::Item>
	<Crumb::Item @link="docs.integration.libraries.python">Python</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
	<h2><Devicon @size="50" @type="python" /> Python driver for <img inline src="/static/img/text.svg" alt="SurrealDB" /></h2>
	<p>The SurrealDB library for Python enables simple and advanced querying of a remote database from a browser or from server-side code. By default connections to SurrealDB are made over WebSockets, and automatically reconnect when the connection is terminated. We however also support connecting through a http client, however that is not as fully implemented yet.</p>
	<p>To contribute to this documentation, <Link @link={{github}}>edit this file on GitHub</Link>.</p>
	<p>To contribute to the driver code, <Link @link="https://github.com/surrealdb/surrealdb.py">submit an Issue or Pull Request here</Link>.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Install the library</h3>
	<p>First, install the SurrealDB library using <code>pip</code>:</p>
	<Code @name="docs-integration-libraries-python-install-pip.bash">
		pip install surrealdb
	</Code>
	<p>Alternatively, you can use install the SurrealDB library using <code><a href="https://python-poetry.org/">poetry</a></code>:</p>
	<Code @name="docs-integration-libraries-python-install-poetry.bash">
		poetry add surrealdb
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Connect to SurrealDB</h3>
	<p>Create a new surreal.py file and add the following code to try out some basic operations using the SurrealDB driver.</p>
	<Code @name="docs/integration/libraries/python/basic.py" />
	<p>Then run your app from the command line with:</p>
	<Code @name="docs-integration-libraries-python-basic-run.bash">
		python surreal.py
	</Code>
	<p>Alternatively, you can run it in a notebook like Jupyter or VS code</p>
	<Code @name="docs/integration/libraries/python/notebook.py" />
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Library methods</h3>
	<p>The Python library comes with a number of built-in functions.</p>
</Layout::Text>

<Layout::Gap tiny />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<a href="#Instance">
						<Ascua::Prism::Inline @language="py" @code="Surreal(url)" />
					</a>
					<l faint r>static</l>
				</td>
				<td>Surreal is a class that represents a Surreal server.</td>
			</tr>
			<tr>
				<td>
					<a href="#connect">
						<Ascua::Prism::Inline @language="py" @code="db.connect()" />
					</a>
				</td>
				<td>Connects to a local or remote database endpoint</td>
			</tr>
			<tr>
				<td>
					<a href="#close">
						<Ascua::Prism::Inline @language="py" @code="db.close()" />
					</a>
				</td>
				<td>Closes the persistent connection to the database</td>
			</tr>
			<tr>
				<td>
					<a href="#use">
						<Ascua::Prism::Inline @language="py" @code="db.use(ns, db)" />
					</a>
				</td>
				<td>Switch to a specific namespace and database</td>
			</tr>
			<tr>
				<td>
					<a href="#signup">
						<Ascua::Prism::Inline @language="py" @code="db.signup(vars)" />
					</a>
				</td>
				<td>Signs this connection up to a specific authentication scope</td>
			</tr>
			<tr>
				<td>
					<a href="#signin">
						<Ascua::Prism::Inline @language="py" @code="db.signin(vars)" />
					</a>
				</td>
				<td>Signs this connection in to a specific authentication scope</td>
			</tr>
			<tr>
				<td>
					<a href="#invalidate">
						<Ascua::Prism::Inline @language="py" @code="db.invalidate()" />
					</a>
				</td>
				<td>Invalidates the authentication for the current connection</td>
			</tr>
			<tr>
				<td>
					<a href="#authenticate">
						<Ascua::Prism::Inline @language="py" @code="db.authenticate(token)" />
					</a>
				</td>
				<td>Authenticates the current connection with a JWT token</td>
			</tr>
			<tr>
				<td>
					<a href="#let">
						<Ascua::Prism::Inline @language="py" @code="db.let(key, val)" />
					</a>
				</td>
				<td>Assigns a value as a parameter for this connection</td>
			</tr>
			<tr>
				<td>
					<a href="#query">
						<Ascua::Prism::Inline @language="py" @code="db.query(sql, vars)" />
					</a>
				</td>
				<td>Runs a set of SurrealQL statements against the database</td>
			</tr>
			<tr>
				<td>
					<a href="#select">
						<Ascua::Prism::Inline @language="py" @code="db.select(thing)" />
					</a>
				</td>
				<td>Selects all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#create">
						<Ascua::Prism::Inline @language="py" @code="db.create(thing, data)" />
					</a>
				</td>
				<td>Creates a record in the database</td>
			</tr>
			<tr>
				<td>
					<a href="#update">
						<Ascua::Prism::Inline @language="py" @code="db.update(thing, data)" />
					</a>
				</td>
				<td>Updates all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#merge">
						<Ascua::Prism::Inline @language="py" @code="db.merge(thing, data)" />
					</a>
				</td>
				<td>Modifies by deep merging all records in a table, or a specific record, in the database</td>
			</tr>
			<tr>
				<td>
					<a href="#patch">
						<Ascua::Prism::Inline @language="py" @code="db.patch(thing, data)" />
					</a>
				</td>
				<td>Applies <Link @link="https://jsonpatch.com">JSON Patch</Link> changes to all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#delete">
						<Ascua::Prism::Inline @language="py" @code="db.delete(thing)" />
					</a>
				</td>
				<td>Deletes all records, or a specific record</td>
			</tr>
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "Instance"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="Surreal(url) / SurrealHTTP(url)" /></h3>
		<p>Surreal is a class that represents a Surreal server.</p>
		<p>The default way to connect is through WebSockets using <code>Surreal(url)</code></p>
		<p>If an http client is needed you can use <code>SurrealHTTP(url)</code> but be aware that it is currently not as stable and not as fully implemented.</p>
		<blockquote yellow text="Note">The url is required in either the Surreal class or connect method</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							The url of the database endpoint to connect to.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-connect.py">
        Connect to a local endpoint
            db = Surreal('ws://127.0.0.1:8000/rpc')
            await db.connect()
            await db.signin({"user": "root", "pass": "root"})

        Connect to a remote endpoint
            db = Surreal('http://cloud.surrealdb.com/rpc')
            await db.connect()
            await db.signin({"user": "root", "pass": "root"})

        Connect with a context manager
            async with Surreal("ws://127.0.0.1:8000/rpc") as db:
                await db.signin({"user": "root", "pass": "root"})
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Group {{waypoint "connect"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.connect(url)" /></h3>
		<p>Connects to a local or remote database endpoint.</p>
		<blockquote yellow text="Note">The url is required in either the Surreal class or connect method</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							The url of the database endpoint to connect to.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-connect.py">
			# Connect to a local endpoint
			db = Surreal()
			await db.connect('http://127.0.0.1:8000/rpc')
			# Connect to a remote endpoint
			db = Surreal()
			await db.connect('https://cloud.surrealdb.com/rpc')
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "close"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.close()" /></h3>
		<p>Closes the persistent connection to the database.</p>
		<Code @name="docs-integration-libraries-python-close.py">
			db.close()
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "use"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.use(ns, db)" /></h3>
		<p>Switch to a specific namespace and database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>ns</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Switches to a specific namespace.
						</td>
					</tr>
					<tr>
						<td>
							<code>db</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Switches to a specific database.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-use.py">
			await db.use('test', 'test')
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "signup"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.signup(vars)" /></h3>
		<p>Signs up to a specific authentication scope.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>vars</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Variables used in a signup query.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-signup.py">
			token = await db.signup({
				'NS': 'test',
				'DB': 'test',
				'SC': 'user',
				'email': 'info@surrealdb.com',
				'pass': '123456',
			})
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "signin"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.signin(vars)" /></h3>
		<p>Signs in to a specific authentication scope.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>vars</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Variables used in a signin query.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-signin.py">
			token = await db.signin({
				'user': 'root',
				'pass': 'root',
			})
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "invalidate"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.invalidate()" /></h3>
		<p>Invalidates the authentication for the current connection.</p>
		<Code @name="docs-integration-libraries-python-invalidate.py">
			await db.invalidate()
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "authenticate"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.authenticate(token)" /></h3>
		<p>Authenticates the current connection with a JWT token.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>token</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The JWT authentication token.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-authenticate.py">
			await db.authenticate('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA')
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "let"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.let(key, val)" /></h3>
		<p>Assigns a value as a parameter for this connection.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>key</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the name of the variable.
						</td>
					</tr>
					<tr>
						<td>
							<code>val</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Assigns the value to the variable name.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-let.py">
			# Assign the variable on the connection
            await db.let("name", {
                "first": "Tobie",
                "last": "Morgan Hitchcock",
            })
			# Use the variable in a subsequent query
			await db.query('CREATE person SET name = $name')
			# Use the variable in a subsequent query
			await db.query('SELECT * FROM person WHERE name.first = $name.first')
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "query"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.query(sql, vars)" /></h3>
		<p>Runs a set of SurrealQL statements against the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>sql</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the SurrealQL statements.
						</td>
					</tr>
					<tr>
						<td>
							<code>vars</code>
							<l faint r>Optional</l>
						</td>
						<td>
							Assigns variables which can be used in the query.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-query.py">
			# Assign the variable on the connection
			result = await db.query('CREATE person; SELECT * FROM type::table($tb)', {
				'tb': 'person',
			})
			# Get the first result from the first query
			result[0]['result'][0]
			# Get all of the results from the second query
			result[1]['result']
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "select"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.select(thing)" /></h3>
		<p>Selects all records in a table, or a specific record, from the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or a record ID to select.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-select.py">
			# Select all records from a table
			people = await db.select('person')
			# Select a specific record from a table
			person = await db.select('person:h5wxrf2ewk8xjxosxtyc')
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-python-select-func.surql">
			SELECT * FROM $thing;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "create"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.create(thing, data)" /></h3>
		<p>Creates a record in the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to create.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-create.py">
			# Create a record with a random ID
			person = await db.create('person')
			# Create a record with a specific ID
			record = await db.create('person:tobie', {
				'name': 'Tobie',
				'settings': {
					'active': true,
					'marketing': true,
				},
			})
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-python-create-func.surql">
			CREATE $thing CONTENT $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "update"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.update(thing, data)" /></h3>
		<p>Updates all records in a table, or a specific record, in the database.</p>
		<blockquote yellow text="Note">This function replaces the current document / record data with the specified data.</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to update.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-update.py">
			# Update all records in a table
			people = await db.update('person')
			# Update a record with a specific ID
			person = await db.update('person:tobie', {
				'name': 'Tobie',
				'settings': {
					'active': true,
					'marketing': true,
				},
			})
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-python-update-func.surql">
			UPDATE $thing CONTENT $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "merge"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.merge(thing, data)" /></h3>
		<p>Modifies by deep merging all records in a table, or a specific record, in the database.</p>
		<blockquote yellow text="Note">This function merges the current document / record data with the specified data.</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to change
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-change.py">
			# Update all records in a table
			people = await db.change('person', {
				updated_at: new Date(),
			})
			# Update a record with a specific ID
            person = await db.change('person:tobie', {
                'updated_at': datetime.datetime.utcnow(),
                'settings': {
                    'active': True,
                    },
                })
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-python-change-func.surql">
			UPDATE $thing MERGE $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "patch"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.patch(thing, data)" /></h3>
		<p>Applies <Link @link="https://jsonpatch.com">JSON Patch</Link> changes to all records, or a specific record, in the database.</p>
		<blockquote yellow text="Note">This function patches the current document / record data with the specified <Link @link="https://jsonpatch.com">JSON Patch</Link> data.</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to modify.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The <Link @link="https://jsonpatch.com">JSON Patch</Link> data with which to modify the records.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-modify.py">
			# Update all records in a table
			people = await db.modify('person', [
				{ 'op': "replace", 'path': "/created_at", 'value': str(datetime.datetime.utcnow()) },
			])
			# Update a record with a specific ID
			person = await db.modify('person:tobie', [
                { 'op': "replace", 'path': "/settings/active", 'value': False },
                { 'op': "add", "path": "/tags", "value": ["developer", "engineer"] },
                { 'op': "remove", "path": "/temp" },
			])
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-python-modify-func.surql">
			UPDATE $thing PATCH $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "delete"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="py" @code="db.delete(thing)" /></h3>
		<p>Deletes all records in a table, or a specific record, from the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or a record ID to select.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-python-delete.py">
			# Delete all records from a table
			await db.delete('person')
			# Delete a specific record from a table
			await db.delete('person:h5wxrf2ewk8xjxosxtyc')
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-python-delete-func.surql">
			DELETE * FROM $thing;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap large />